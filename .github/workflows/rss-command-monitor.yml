name: Monitor EQ RSS Feed for Command Updates

on:
  # Triggered by IFTTT webhook when RSS feed updates
  repository_dispatch:
    types: [rss_feed_updated]
  # Fallback: Run daily at 8 AM UTC in case webhook misses something
  schedule:
    - cron: '0 8 * * *'
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      clear_cache:
        description: 'Clear RSS feed state cache before running'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: rss-command-monitor
  cancel-in-progress: true

jobs:
  monitor-rss:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (no submodules)
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          submodules: false

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.SUBMODULES_SSH_KEY }}

      - name: Configure Git for SSH submodules
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global url."git@github.com:".insteadOf "https://github.com/"
          git config --global url."git@gitlab.com:".insteadOf "https://gitlab.com/"
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

      - name: Initialize everquest-docs submodule
        run: |
          git submodule sync -- docs/projects/everquest
          git submodule update --init --recursive docs/projects/everquest

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Restore persistent state cache
      # Uses a single static key that's updated on every run
      # Daily cron keeps cache alive indefinitely (7-day expiration resets on access)
      - name: Restore RSS feed state cache
        if: ${{ !inputs.clear_cache }}
        uses: actions/cache/restore@v4
        with:
          path: .cache
          key: rss-feed-state

      - name: Clear cache (if requested)
        if: ${{ inputs.clear_cache }}
        run: |
          rm -rf .cache
          echo "Cache cleared! Next run will start fresh."

      - name: Run RSS monitor script
        id: rss_monitor
        env:
          DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        run: |
          python automation/rss_patch_command_monitor.py

      # Save updated state back to same cache key
      # This updates the existing cache and resets its expiration timer
      - name: Save RSS feed state cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: .cache
          key: rss-feed-state

      - name: Check for changes in submodule
        id: check_changes
        working-directory: docs/projects/everquest
        run: |
          if git diff --quiet commands/; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request in everquest-docs repo
        id: create_pr
        if: steps.check_changes.outputs.has_changes == 'true'
        working-directory: docs/projects/everquest
        env:
          GH_TOKEN: ${{ secrets.GH_API_TOKEN }}
        run: |
          # Create branch with timestamp
          BRANCH_NAME="rss-update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b "$BRANCH_NAME"
          
          # Stage changes
          git add commands/
          
          # Get list of changed files for PR body
          NEW_FILES=$(git diff --cached --name-status | grep "^A" | sed 's/^A\s*//' | sed 's/.*cmd-/\//' | sed 's/.md$//' | tr '\n' ' ')
          UPDATED_FILES=$(git diff --cached --name-status | grep "^M" | sed 's/^M\s*//' | sed 's/.*cmd-/\//' | sed 's/.md$//' | tr '\n' ' ')
          
          # Count changes
          NUM_CHANGES=$(git diff --cached --name-only | wc -l)
          
          # Commit changes
          git commit -m "Update EQ command documentation from RSS feed"
          
          # Push branch to everquest-docs repo
          git push origin "$BRANCH_NAME"
          
          # Build PR body
          PR_BODY="Automated command documentation updates from EQ patch notes.
          
          **Changed:** $NUM_CHANGES command(s)"
          
          if [ -n "$NEW_FILES" ]; then
            PR_BODY="${PR_BODY}
          **New:**${NEW_FILES}"
          fi
          
          if [ -n "$UPDATED_FILES" ]; then
            PR_BODY="${PR_BODY}
          **Updated:**${UPDATED_FILES}"
          fi
          
          # Add patch notes links if available
          PATCH_NOTES='${{ steps.rss_monitor.outputs.patch_notes }}'
          if [ -n "$PATCH_NOTES" ] && [ "$PATCH_NOTES" != "null" ]; then
            PR_BODY="${PR_BODY}
          
          **Source:**
          $(echo "$PATCH_NOTES" | jq -r '.[] | "- [\(.title)](\(.link))"')"
          fi
          
          # Create PR in the everquest-docs repository
          PR_URL=$(gh pr create \
            --repo RedGuides/everquest-docs \
            --title "Command docs update from EQ patch notes" \
            --body "$PR_BODY" \
            --base main \
            --head "$BRANCH_NAME" \
            --draft)
          
          # Output PR details for subsequent steps
          echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
          echo "num_changes=$NUM_CHANGES" >> $GITHUB_OUTPUT
          echo "new_files=$NEW_FILES" >> $GITHUB_OUTPUT
          echo "updated_files=$UPDATED_FILES" >> $GITHUB_OUTPUT
          
          # Extract first patch note link for forum post
          FIRST_PATCH_NOTE=$(echo "$PATCH_NOTES" | jq -r '.[0].link // empty')
          echo "first_patch_note=$FIRST_PATCH_NOTE" >> $GITHUB_OUTPUT

      - name: Post to RedGuides forum
        if: steps.create_pr.outputs.pr_url != ''
        uses: RedGuides/redguides-reply@v1
        env:
          REDGUIDES_API_KEY: ${{ secrets.XF_DONOTREPLY_KEY }}
        with:
          thread-id: '95078'
          message: |
            Hi! I'm from [URL=https://github.com/RedGuides/readguides/blob/master/automation/rss_patch_command_monitor.py]rss_patch_command_monitor.py[/URL], [URL=https://github.com/RedGuides/readguides]ReadðŸ“–Guides[/URL]. I read EQ patch notes on acid.
            
            I found ${{ steps.create_pr.outputs.num_changes }} command(s) in [URL=${{ steps.create_pr.outputs.first_patch_note }}]recent patch notes[/URL] worth updating over at https://github.com/RedGuides/everquest-docs 
            
            Please check my PR: ${{ steps.create_pr.outputs.pr_url }}

